# CI/CD Configuration for Solo Development
# This file defines common settings and thresholds used across all workflows

# Coverage thresholds
coverage:
  feature_branch: 60 # Minimum coverage for feature branches
  main_branch: 75 # Minimum coverage for main branch
  nft_gallery_main: 70 # NFT Gallery specific threshold

# Security scanning
security:
  trivy_severity: "CRITICAL,HIGH" # Only fail on critical and high severity
  bandit_skips: "B101,B601" # Skip specific bandit checks
  safety_fail_on: "CRITICAL" # Only fail safety on critical issues

# Performance thresholds
performance:
  max_response_time: 2000 # Maximum response time in ms
  max_memory_usage: 512 # Maximum memory usage in MB
  max_cpu_usage: 80 # Maximum CPU usage percentage

# Docker settings
docker:
  base_image: "python:3.11-slim" # Default base image
  registry: "ghcr.io" # Container registry
  cache_from: "type=gha" # Use GitHub Actions cache
  cache_to: "type=gha,mode=max" # Cache to GitHub Actions

# Test settings
testing:
  unit_test_timeout: 300 # Unit test timeout in seconds
  integration_test_timeout: 600 # Integration test timeout
  e2e_test_timeout: 900 # E2E test timeout
  parallel_jobs: 4 # Number of parallel test jobs

# Notification settings
notifications:
  slack_channel: "#deployments" # Slack channel for notifications
  email_recipients: [] # Email recipients for notifications
  webhook_url: "" # Webhook URL for notifications

# Environment settings
environments:
  development:
    branch: "develop"
    auto_deploy: true
    health_check_url: "http://localhost:8000/health"

  staging:
    branch: "staging"
    auto_deploy: false
    health_check_url: "https://staging.example.com/health"

  production:
    branch: "main"
    auto_deploy: true
    health_check_url: "https://production.example.com/health"
    requires_approval: true

# Project-specific settings
projects:
  estfor:
    python_version: "3.11"
    test_path: "tests/"
    coverage_path: "app/"
    dockerfile: "Dockerfile"
    docker_compose: "docker-compose.yml"
    health_endpoint: "/health"
    database: "mongodb"

  nft_gallery:
    python_version: "3.11"
    test_path: "tests/"
    coverage_path: "src/"
    dockerfile: "Dockerfile"
    docker_compose: "docker-compose.yml"
    health_endpoint: "/health"
    database: "firestore"

  whispered_video:
    python_version: "3.9"
    test_path: "tests/"
    coverage_path: "."
    dockerfile: "Dockerfile"
    docker_compose: "docker-compose.yml"
    health_endpoint: "/health"
    database: "none"

# Workflow triggers
triggers:
  push:
    branches: ["main", "develop", "feature/*", "bugfix/*"]
    paths:
      - "**/*.py"
      - "**/*.yml"
      - "**/*.yaml"
      - "**/Dockerfile"
      - "**/requirements*.txt"

  pull_request:
    branches: ["main", "develop"]
    paths:
      - "**/*.py"
      - "**/*.yml"
      - "**/*.yaml"
      - "**/Dockerfile"
      - "**/requirements*.txt"

# Artifact retention
artifacts:
  retention_days: 30
  max_size_mb: 1000
  compression: true

# Cache settings
cache:
  key: "${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}"
  restore_keys:
    - "${{ runner.os }}-"
    - "${{ runner.os }}-pip-"
