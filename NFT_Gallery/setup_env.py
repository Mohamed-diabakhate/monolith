#!/usr/bin/env python3
"""
Environment Variables Setup Helper

This script helps you set up environment variables for the NFT Gallery application.
It will create a .env file with your configuration.
"""
import os
import sys
from pathlib import Path


def create_env_file():
    """Create a .env file with user input."""
    
    print("🔥 NFT Gallery Environment Setup")
    print("=" * 50)
    print("This script will help you create a .env file with your configuration.")
    print()
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        response = input("⚠️  .env file already exists. Overwrite? (y/N): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    # Collect configuration
    config = {}
    
    print("\n📋 Required Configuration")
    print("-" * 30)
    
    # Helius API Key
    print("\n1. Helius API Key")
    print("   Get your API key from https://www.helius.dev/")
    helius_key = input("   Enter your Helius API key: ").strip()
    if not helius_key:
        print("   ❌ Helius API key is required!")
        return
    config['HELIUS_API_KEY'] = helius_key
    
    # Google Cloud Project (optional)
    print("\n2. Google Cloud Project ID (Optional - for Firestore integration)")
    print("   Leave blank if you don't want to use Firestore")
    gcp_project = input("   Enter your Google Cloud project ID: ").strip()
    if gcp_project:
        config['GOOGLE_CLOUD_PROJECT'] = gcp_project
    
    # Google Cloud Credentials (optional)
    if gcp_project:
        print("\n3. Google Cloud Service Account Key (Optional)")
        print("   Leave blank to use Application Default Credentials")
        credentials_path = input("   Enter path to service account key file: ").strip()
        if credentials_path and os.path.exists(credentials_path):
            config['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_path
        elif credentials_path:
            print("   ⚠️  File not found, skipping...")
    
    print("\n📋 Optional Configuration")
    print("-" * 30)
    
    # Output Directory
    output_dir = input(f"\n4. Output Directory (default: ~/Pictures/SolanaNFTs): ").strip()
    if output_dir:
        config['OUTPUT_DIR'] = output_dir
    else:
        config['OUTPUT_DIR'] = "~/Pictures/SolanaNFTs"
    
    # Log Level
    print("\n5. Log Level")
    print("   Options: DEBUG, INFO, WARNING, ERROR")
    log_level = input("   Enter log level (default: INFO): ").strip().upper()
    if log_level in ['DEBUG', 'INFO', 'WARNING', 'ERROR']:
        config['LOG_LEVEL'] = log_level
    else:
        config['LOG_LEVEL'] = "INFO"
    
    # Performance Settings
    print("\n6. Performance Settings")
    max_downloads = input("   Max concurrent downloads (default: 5): ").strip()
    if max_downloads.isdigit():
        config['MAX_CONCURRENT_DOWNLOADS'] = max_downloads
    
    timeout = input("   Request timeout in seconds (default: 30): ").strip()
    if timeout.isdigit():
        config['REQUEST_TIMEOUT'] = timeout
    
    # Create .env file
    print("\n📝 Creating .env file...")
    
    env_content = f"""# Solana NFT Downloader Environment Configuration
# Generated by setup_env.py

# =============================================================================
# REQUIRED: Helius API Configuration
# =============================================================================
HELIUS_API_KEY={config['HELIUS_API_KEY']}

# =============================================================================
# REQUIRED FOR FIRESTORE: Google Cloud Configuration
# =============================================================================
"""
    
    if 'GOOGLE_CLOUD_PROJECT' in config:
        env_content += f"GOOGLE_CLOUD_PROJECT={config['GOOGLE_CLOUD_PROJECT']}\n"
    
    env_content += """
# =============================================================================
# OPTIONAL: Google Cloud Authentication
# =============================================================================
"""
    
    if 'GOOGLE_APPLICATION_CREDENTIALS' in config:
        env_content += f"GOOGLE_APPLICATION_CREDENTIALS={config['GOOGLE_APPLICATION_CREDENTIALS']}\n"
    
    env_content += f"""
# =============================================================================
# OPTIONAL: Application Configuration
# =============================================================================
OUTPUT_DIR={config['OUTPUT_DIR']}
LOG_LEVEL={config['LOG_LEVEL']}

# =============================================================================
# OPTIONAL: Performance Tuning
# =============================================================================
"""
    
    if 'MAX_CONCURRENT_DOWNLOADS' in config:
        env_content += f"MAX_CONCURRENT_DOWNLOADS={config['MAX_CONCURRENT_DOWNLOADS']}\n"
    
    if 'REQUEST_TIMEOUT' in config:
        env_content += f"REQUEST_TIMEOUT={config['REQUEST_TIMEOUT']}\n"
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        # Set file permissions
        os.chmod('.env', 0o600)
        
        print("✅ .env file created successfully!")
        print(f"📁 File location: {env_file.absolute()}")
        print(f"🔒 File permissions: {oct(os.stat('.env').st_mode)[-3:]}")
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return
    
    # Verify setup
    print("\n🔍 Verifying setup...")
    verify_setup(config)
    
    print("\n🎉 Environment setup completed!")
    print("\n📚 Next steps:")
    print("1. Test your configuration:")
    print("   python main.py --wallet YOUR_WALLET --validate-only")
    print("2. For Firestore integration:")
    print("   python main_enhanced.py --wallet YOUR_WALLET --validate-only")
    print("3. Check ENVIRONMENT_SETUP.md for more details")


def verify_setup(config):
    """Verify the environment setup."""
    
    # Check if .env file exists
    if not Path('.env').exists():
        print("   ❌ .env file not found")
        return
    
    # Check required variables
    required_vars = ['HELIUS_API_KEY']
    for var in required_vars:
        if var in config:
            print(f"   ✅ {var}: SET")
        else:
            print(f"   ❌ {var}: NOT SET")
    
    # Check optional variables
    optional_vars = ['GOOGLE_CLOUD_PROJECT', 'OUTPUT_DIR', 'LOG_LEVEL']
    for var in optional_vars:
        if var in config:
            print(f"   ✅ {var}: {config[var]}")
        else:
            print(f"   ⚠️  {var}: Using default")
    
    # Check file permissions
    try:
        stat = os.stat('.env')
        permissions = oct(stat.st_mode)[-3:]
        if permissions == '600':
            print("   ✅ File permissions: Secure (600)")
        else:
            print(f"   ⚠️  File permissions: {permissions} (should be 600)")
    except Exception as e:
        print(f"   ❌ Error checking permissions: {e}")


def check_existing_env():
    """Check existing environment variables."""
    
    print("🔍 Checking existing environment variables...")
    
    env_vars = {
        'HELIUS_API_KEY': 'Required for all modes',
        'GOOGLE_CLOUD_PROJECT': 'Required for Firestore integration',
        'GOOGLE_APPLICATION_CREDENTIALS': 'Optional for Google Cloud auth',
        'OUTPUT_DIR': 'Optional output directory',
        'LOG_LEVEL': 'Optional logging level'
    }
    
    for var, description in env_vars.items():
        value = os.getenv(var)
        if value:
            # Mask sensitive values
            if 'KEY' in var or 'CREDENTIALS' in var:
                display_value = value[:8] + "..." if len(value) > 8 else "***"
            else:
                display_value = value
            print(f"   ✅ {var}: {display_value}")
        else:
            print(f"   ❌ {var}: NOT SET ({description})")


def main():
    """Main function."""
    
    if len(sys.argv) > 1:
        if sys.argv[1] == 'check':
            check_existing_env()
            return
        elif sys.argv[1] == 'help':
            print("Usage:")
            print("  python setup_env.py          # Interactive setup")
            print("  python setup_env.py check    # Check existing variables")
            print("  python setup_env.py help     # Show this help")
            return
    
    create_env_file()


if __name__ == "__main__":
    main() 