name: Main Pipeline

on:
  push:
    branches: [feature, main]
    paths:
      - "app/**"
      - "tests/**"
      - "requirements*.txt"
      - "Dockerfile"
      - "docker-compose*.yml"
      - "pyproject.toml"
      - "pytest.ini"
      - ".github/workflows/main-pipeline.yml"

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run code quality checks
        run: |
          black --check --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          pytest --cov=app --cov-report=term-missing

      - name: Build Docker image
        run: |
          docker build -t estfor:latest .

      - name: Test Docker container
        run: |
          docker run --rm estfor:latest pytest --cov=app --cov-report=term-missing

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Full code quality check
        run: |
          black --check --diff .
          isort --check-only --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          mypy app/ --ignore-missing-imports
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Run comprehensive tests
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: estfor:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "estfor:production"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "âœ… All tests passed"
          echo "âœ… Code quality checks passed"
          echo "âœ… Security scan completed"
          echo "âœ… Docker image built successfully"
          echo "ðŸ“¦ Ready for production deployment" 