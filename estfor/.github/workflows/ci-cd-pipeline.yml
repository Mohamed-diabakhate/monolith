name: CI/CD Pipeline

on:
  push:
    branches:
      - feature
      - main
    paths:
      - "app/**"
      - "tests/**"
      - "requirements*.txt"
      - "Dockerfile"
      - "docker-compose*.yml"
      - "pyproject.toml"
      - "pytest.ini"
      - ".github/workflows/ci-cd-pipeline.yml"

jobs:
  development-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feature'
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run code quality checks
        run: |
          black --check --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Execute test suite
        run: |
          pytest --cov=app --cov-report=term-missing

      - name: Build development Docker image
        run: |
          docker build -t estfor:dev .

      - name: Test Docker container
        run: |
          docker run --rm estfor:dev pytest --cov=app --cov-report=term-missing

  production-deployment:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run comprehensive code quality checks
        run: |
          black --check --diff .
          isort --check-only --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          mypy app/ --ignore-missing-imports
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Run comprehensive test suite
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: estfor:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run security vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "estfor:production"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Deploy to production environment
        run: |
          echo "ðŸš€ Starting production deployment..."
          echo "âœ… All tests passed successfully"
          echo "âœ… Code quality checks completed"
          echo "âœ… Security scan finished"
          echo "âœ… Docker image built successfully"
          echo "ðŸ“¦ Ready for production deployment"
          # Add your production deployment commands here
          # Example: docker-compose -f docker-compose.prod.yml up -d
