name: Build & Test - estfor

on:
  push:
    branches:
      - main
      - feature # Temporary: for testing
    paths:
      - "estfor/app/**"
      - "estfor/tests/**"
      - "estfor/requirements*.txt"
      - "estfor/Dockerfile"
      - "estfor/docker-compose*.yml"
      - "estfor/pyproject.toml"
      - "estfor/pytest.ini"
      - ".github/workflows/build.yaml"
  pull_request:
    branches:
      - main
      - feature # Temporary: for testing
    paths:
      - "estfor/app/**"
      - "estfor/tests/**"
      - "estfor/requirements*.txt"
      - "estfor/Dockerfile"
      - "estfor/docker-compose*.yml"
      - "estfor/pyproject.toml"
      - "estfor/pytest.ini"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: estfor

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Code quality checks
        run: |
          # Format check
          black --check --diff .
          # Import sorting check
          isort --check-only --diff .
          # Linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          # Type checking
          mypy app/ --ignore-missing-imports
          # Security scan
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./estfor
          push: false
          tags: estfor:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests in container
        run: |
          docker run --rm estfor:latest pytest --cov=app --cov-report=term-missing

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "estfor:latest"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/tags/v*'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: docker-compose -f docker-compose.prod.yml up -d
