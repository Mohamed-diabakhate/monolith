name: Dependency Management

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - "requirements*.txt"
      - "pyproject.toml"
      - ".github/workflows/dependencies.yml"
  pull_request:
    branches:
      - main
    paths:
      - "requirements*.txt"
      - "pyproject.toml"

jobs:
  dependency-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Check for outdated dependencies
        run: |
          pip list --outdated --format=freeze > outdated.txt
          if [ -s outdated.txt ]; then
            echo "Found outdated dependencies:"
            cat outdated.txt
            exit 1
          else
            echo "All dependencies are up to date"
          fi

      - name: Security vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          if [ -s safety-report.json ]; then
            echo "Security vulnerabilities found:"
            cat safety-report.json
            exit 1
          else
            echo "No security vulnerabilities found"
          fi

      - name: Create issue for outdated dependencies
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let outdatedDeps = '';
            let securityIssues = '';

            try {
              outdatedDeps = fs.readFileSync('outdated.txt', 'utf8');
            } catch (e) {
              console.log('No outdated dependencies file found');
            }

            try {
              const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              securityIssues = JSON.stringify(safetyReport, null, 2);
            } catch (e) {
              console.log('No security report found');
            }

            const body = `## Dependency Update Required

            ### Outdated Dependencies
            \`\`\`
            ${outdatedDeps || 'None found'}
            \`\`\`

            ### Security Vulnerabilities
            \`\`\`json
            ${securityIssues || 'None found'}
            \`\`\`

            Please review and update dependencies as needed.

            /cc @dependabot`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîç Dependency Update Check - ' + new Date().toISOString().split('T')[0],
              body: body,
              labels: ['dependencies', 'security', 'automated']
            });
